import java.util.ArrayList;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

public class Main {

    AVLTree avlTree; // The AVLTree instance to manage parking lots

    // Constructor to initialize the AVLTree
    public Main() {
        avlTree = new AVLTree();
    }

    // Main method that reads input from a file, processes it, and writes the output to another file
    public static void main(String[] args) {

        long start = System.currentTimeMillis();
        Main mainApp = new Main();
        String inputFilePath = args[0];
        String outputFilePath = args[1];

        try (BufferedReader reader = new BufferedReader(new FileReader(inputFilePath));
             FileWriter writer = new FileWriter(outputFilePath)) {

            String line;
            // Read the input file line by line
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(" ");// Split the line into individual parts (command and parameters)
                String command = parts[0];// The first part is the command

                // Switch-case to handle different commands
                switch (command) {
                    case "create_parking_lot":
                        int capacityConstraint = Integer.parseInt(parts[1]);
                        int truckLimit = Integer.parseInt(parts[2]);
                        // Create a parking lot with given constraints
                        mainApp.createParkingLot(capacityConstraint, truckLimit);
                        break;

                    case "add_truck":
                        int truckId = Integer.parseInt(parts[1]);
                        int truckCapacity = Integer.parseInt(parts[2]);
                        // Add a truck to the system
                        int assignedLotCapacity = mainApp.addTruck(truckId, truckCapacity);
                        // Output the result (assigned parking lot capacity)
                        writer.write(assignedLotCapacity != -1 ? assignedLotCapacity + "\n" : "-1\n");
                        break;

                    case "ready":
                        int lotCapacity = Integer.parseInt(parts[1]);
                        // Mark a truck as ready in a specified parking lot
                        String readyResult = mainApp.makeReady(lotCapacity);
                        writer.write(readyResult + "\n");// Output the result of the "ready" command
                        break;

                    case "load":
                        int loadCapacity = Integer.parseInt(parts[1]);
                        int loadAmount = Integer.parseInt(parts[2]);
                        String loadResult = mainApp.load(loadCapacity, loadAmount);// Handle the loading of trucks
                        writer.write(loadResult + "\n");//Output
                        break;

                    case "delete_parking_lot":
                        int capacityConstraintDelete = Integer.parseInt(parts[1]);
                        // Delete a parking lot with the specified capacity constraint
                        mainApp.deleteParkingLot(capacityConstraintDelete);
                        break;

                    case "count":
                        int capacityConstraintCount = Integer.parseInt(parts[1]);
                        // Count the number of trucks in a parking lot
                        int countResult = mainApp.count(capacityConstraintCount);
                        writer.write(countResult + "\n");
                        break;

                }
            }

        } catch (IOException e) {
            e.printStackTrace();// Handle any IO exceptions that might occur
        }
        long end = System.currentTimeMillis();
        long duration = end - start;
        System.out.println(duration + "miliseconds");
    }
    // Method to create a parking lot with given capacity constraint and truck limit
    public void createParkingLot(int capacityConstraint, int truckLimit) {
        ParkingLot newLot = new ParkingLot(capacityConstraint, truckLimit);
        avlTree.insert(newLot);
    }

    // Method to add a truck to a parking lot and return the assigned lot's capacity
    public int addTruck(int id, int capacity) {
        Truck truck = new Truck(id, capacity);
        return avlTree.addTruckToNodeOrSmaller(capacity, truck);
    }

    // Method to mark a truck as ready to load in a parking lot
    public String makeReady(int capacity) {
        return avlTree.makeTruckReady(capacity);
    }

    // Method to handle the "load" command and distribute loads to trucks
    public String load(int capacity, int loadAmount) {
        return avlTree.load(capacity, loadAmount);
    }

    // Method to delete a parking lot based on its capacity constraint
    public void deleteParkingLot(int capacity) {
        avlTree.remove(avlTree.root, capacity);
    }

    // Method to count the number of trucks in a parking lot with a specific capacity constraint
    public int count(int capacityCosntraint) {
        return avlTree.count(avlTree.root, capacityCosntraint);
    }

    // Inner class for Truck
    class Truck {
        int id;
        int currentLoad;
        int maxCapacity;

        // Constructor for creating a truck with the given ID and maximum capacity
        Truck(int id, int maxCapacity) {
            this.id = id;
            this.maxCapacity = maxCapacity;
            this.currentLoad = 0;// Initially, the truck has no load
        }

        // Method to load the truck with a specified load amount considering constraints
        public int loadReceivedTruck( int capacityConstraint,int loadAmount,Truck truck) {
            // Load the truck with the minimum of remaining capacity or the load amount
            int normalLoadReceived = Math.min(truck.maxCapacity - truck.currentLoad , loadAmount);
            int constraintLoadReceived = Math.min(normalLoadReceived, capacityConstraint);
            truck.currentLoad = truck.currentLoad + constraintLoadReceived;// Update the truck's current load
            return constraintLoadReceived;
        }

        // method to check whether the truck is full or not
        public boolean isFull() {
            return currentLoad == maxCapacity;
        }
        // Calculate the remaining capacity in the truck
        public int remainingCapacity() {
            return maxCapacity - currentLoad;
        }
    }

    // Inner class for Parking Lot
    class ParkingLot {
        int capacityConstraint;
        int truckLimit;
        Queue waitingSection;
        Queue readySection;

        // Constructor for creating a parking lot with the given constraints and truck limit
        ParkingLot(int capacityConstraint, int truckLimit) {
            this.capacityConstraint = capacityConstraint;
            this.truckLimit = truckLimit;
            this.waitingSection = new Queue();// Initialize the waiting section queue
            this.readySection = new Queue();// Initialize the ready section queue
        }

        // method to check whether the lot is full or not
        public boolean isFull() {
            return waitingSection.size() + readySection.size() == truckLimit;
        }
    }

    // Inner class representing a queue node
    class queueNode {
        Truck truck; // The truck stored in this node
        queueNode next;// Reference to the next node in the queue

        public queueNode(Truck truck) {
            this.truck = truck;
            this.next = null;// Initially, the next node is null
        }
    }

    // Inner class representing a Queue (for waiting or ready trucks)
    class Queue {
        private queueNode head;// Reference to the head (first) node in the queue
        private queueNode tail;// Reference to the tail (last) node in the queue
        private int size;// The number of elements in the queue

        // Constructor
        public Queue() {
            this.head = null;
            this.tail = null;
            this.size = 0;
        }

        // Method to enqueue (add) a truck to the queue
        public void enqueue(Truck truck) {
            queueNode newNode = new queueNode(truck);
            if (tail != null) {
                tail.next = newNode;// Link the current tail node to the new node
            }
            tail = newNode;// Update the tail to the new node
            if (head == null) {
                head = newNode; // If the queue was empty, the new node is both the head and the tail
            }
            size++;
        }

        // Method to dequeue (remove) a truck from the front of the queue
        public Truck dequeue() {
            if (isEmpty()) {
                return null;
            }
            Truck truck = head.truck;
            head = head.next;
            if (head == null) {
                tail = null;
            }
            size--;
            return truck;
        }

        public boolean isEmpty() {
            return head == null;
        }

        // Method to get the size of the queue
        public int size() {
            return size;
        }
    }

    // Inner class representing the AVL Tree for managing parking lots
    class AVLTree {
        class Node {
            ParkingLot parkingLot;// The parking lot associated with this node
            int height;// Left and right child nodes
            Node left, right;// The height of the node for balancing purposes

            // Constructor
            Node(ParkingLot parkingLot) {
                this.parkingLot = parkingLot;
                this.height = 1;
                this.right = null;
                this.left = null;

            }
        }

        Node root;// The root node of the AVL tree

        // Method to get the height of a node
        public int height(Node node) {
            return node == null ? 0 : node.height;
        }

        // Method to calculate the balance factor of a node
        public int balanceFactor(Node node) {
            return node == null ? 0 : height(node.right) - height(node.left);
        }

        // Method to update and rearrange the height
        public void updateHeight(Node node) {
            node.height = Math.max(height(node.left), height(node.right)) + 1;
        }

        // Method to perform a left rotation on a node (for AVL balancing)
        public Node rotateLeft(Node x) {
            Node y = x.right;
            x.right = y.left;
            y.left = x;
            updateHeight(x);
            updateHeight(y);
            return y;// Return the new root after rotation
        }

        // Method to perform a right rotation on a node (for AVL balancing)
        public Node rotateRight(Node y) {
            Node x = y.left;
            y.left = x.right;
            x.right = y;
            updateHeight(y);
            updateHeight(x);
            return x;
        }

        // Balance the AVL tree after insertion or removal
        public Node balance(Node node) {
            updateHeight(node);
            int balance = balanceFactor(node);// Get the balance factor of the current node
            // Perform rotations based on the balance factor to ensure AVL balance
            if (balance < -1 && balanceFactor(node.left) <= 0) {
                return rotateRight(node); // Left-heavy, rotate right
            }
            if (balance > 1 && balanceFactor(node.right) >= 0) {
                return rotateLeft(node); // Right-heavy, rotate left
            }
            if (balance < -1 && balanceFactor(node.left) > 0) {
                node.left = rotateLeft(node.left); // Left-right case, perform double rotation
                return rotateRight(node);
            }
            if (balance > 1 && balanceFactor(node.right) < 0) {
                node.right = rotateRight(node.right);// Right-left case, perform double rotation
                return rotateLeft(node);
            }
            return node;
        }

        // Method to insert a parking lot into the AVL tree
        public Node insert(Node node, ParkingLot parkingLot) {
            if (node == null) return new Node(parkingLot);// If the node is null, create a new node with the given parking lot
            if (parkingLot.capacityConstraint < node.parkingLot.capacityConstraint) {
                node.left = insert(node.left, parkingLot);// If the parking lot's constraint is smaller, go left
            } else {
                node.right = insert(node.right, parkingLot);
            }
            return balance(node);// Balance the tree after insertion
        }

        public void insert(ParkingLot parkingLot) {
            root = insert(root, parkingLot);
        }

        //Method to remove given node from the AVLTree
        public Node remove(Node node, int capacityConstraint) {
            if (node == null) {
                return null;
            }
            // Traverse the tree to find the node with the specified capacity constraint
            if (capacityConstraint < node.parkingLot.capacityConstraint) {
                // If the constraint is smaller, go to the left child
                node.left = remove(node.left, capacityConstraint);
            } else if (capacityConstraint > node.parkingLot.capacityConstraint) {
                // If the constraint is larger, go to the right child
                node.right = remove(node.right, capacityConstraint);
            } else {
                // If the node to be removed is found
                if (node.left == null || node.right == null) {
                    // If the node has one or no children, replace the node with its child (if any)
                    node = (node.left != null) ? node.left : node.right;
                } else {
                    // If the node has two children, replace it with the minimum node from the right subtree
                    Node minNode = getMinNode(node.right);// Get the smallest node from the right subtree
                    node.parkingLot = minNode.parkingLot;// Replace current node's parking lot with the min node's parking lot
                    node.right = remove(node.right, minNode.parkingLot.capacityConstraint);// Recursively remove the min node
                }
            }

            if (node != null) {
                updateHeight(node);
                node = balance(node);
            }

            return node;
        }

        // Helper method to get the minimum node (with the smallest capacity constraint) in a subtree
        public Node getMinNode(Node node) {
            Node current = node;
            while (current.left != null) {
                current = current.left;
            }
            return current;
        }

        //REMOVE_END//


        // Insert truck into the correct node (AVL balancing during the insertion)
        public int addTruckToNodeOrSmaller(int truckCapacity, Truck truck) {
            Node targetNode = findLargestNodeLessThanOrEqual(root, truckCapacity);
            while (targetNode != null) {
                if (!targetNode.parkingLot.isFull()) {
                    targetNode.parkingLot.waitingSection.enqueue(truck);  // Add the truck to the waiting section of the parking lot
                    return targetNode.parkingLot.capacityConstraint;
                }
                // If the current node is full, move to the parent node to check for another option
                targetNode = findLargestNodeLessThanOrEqual(root, targetNode.parkingLot.capacityConstraint - 1);
            }
            return -1;
        }

        //method to find the largest node whose capacity is less than or equal to a given key
        public Node findLargestNodeLessThanOrEqual(Node node, int key) {
            Node current = node;
            Node parent = null;  // To keep track of the parent node
            while (current != null) {
                if (current.parkingLot.capacityConstraint <= key) {
                    parent = current;
                    current = current.right;   // If the node fits the condition, mark it as the parent and move right to find larger ones
                } else {
                    current = current.left;  // Otherwise, move left to find smaller nodes
                }
            }
            return parent;  // Return the last valid node (parent) found
        }

        // method to move a truck from the waiting section to the ready section in a parking lot
        public String makeTruckReady(int capacity) {
            Node targetNode = findNodeByCapacityOrLarger(root, capacity);// Find a node with enough capacity
            while (targetNode != null) {
                if (!targetNode.parkingLot.waitingSection.isEmpty()) {
                    Truck truck = targetNode.parkingLot.waitingSection.dequeue();  // Remove the truck from the waiting section
                    targetNode.parkingLot.readySection.enqueue(truck); // Add the truck to the ready section
                    return truck.id + " " + targetNode.parkingLot.capacityConstraint; // Return the truck's ID and parking lot capacity
                }
                // Move to the parent node if no truck is found in the current node's waiting section
                targetNode = findNodeByCapacityOrLarger(root, targetNode.parkingLot.capacityConstraint + 1);
            }
            return "-1";
        }


        // method to find the first node with a capacity greater than or equal to the given key
        public Node findNodeByCapacityOrLarger(Node node, int key) {
            Node current = node;
            Node parent = null;  // To keep track of the parent node
            while (current != null) {
                if (current.parkingLot.capacityConstraint >= key) {
                    parent = current;  // If the node fits the condition, mark it as the parent and move left to find smaller nodes
                    current = current.left;
                } else {
                    current = current.right; // Otherwise, move right to find larger nodes
                }
            }
            return parent;  // Return the last valid node (parent) found
        }

        // This method handles the loading process. It attempts to load trucks from the ready section of parking lots
        public String load(int capacityConstraint, int loadAmount) {
            ArrayList<String> pairs = new ArrayList<>();
            Node targetNode = findNodeByCapacityOrLarger(root, capacityConstraint);

            while (targetNode != null && loadAmount > 0) {
                ParkingLot lot = targetNode.parkingLot;

                // Process trucks in the ready section and load them
                while (!lot.readySection.isEmpty() && loadAmount > 0) {
                    Truck truck = lot.readySection.dequeue();
                    int loadReceived = truck.loadReceivedTruck(lot.capacityConstraint, loadAmount, truck);
                    loadAmount -= loadReceived;// Deduct the received load from the total load to be distributed

                    int newCapacityConstraint;
                    if (truck.isFull()) {
                        truck.currentLoad = 0;
                        newCapacityConstraint = avlTree.addTruckToNodeOrSmaller(truck.maxCapacity, truck);// Reassign the truck to a smaller parking lot
                        pairs.add(truck.id + " " + newCapacityConstraint);
                    } else {
                        int rem = truck.remainingCapacity();
                        newCapacityConstraint = avlTree.addTruckToNodeOrSmaller(rem, truck); // Reassign the truck to another parking lot based on remaining capacity
                        pairs.add(truck.id + " " + newCapacityConstraint);
                    }
                }

                // Move to the parent node if no more trucks are available in the current parking lot
                targetNode = findNodeByCapacityOrLarger(root, lot.capacityConstraint + 1);
            }
            // If no trucks were loaded, return "-1". Otherwise, return a string representing the truck loading actions
            return pairs.isEmpty() ? "-1" : String.join(" - ", pairs);
        }


        //method to the total number of trucks in the waiting and ready sections of parking lots
        public int count(Node node, int capacityConstraint){
            if (node == null){return 0;}

            int count = 0;
            if (node.parkingLot.capacityConstraint > capacityConstraint){
                // If the node's capacity is larger than the specified threshold, add the number of trucks in the waiting and ready sections
                count += node.parkingLot.readySection.size +  node.parkingLot.waitingSection.size ;
                count += count(node.left, capacityConstraint);// Recursively count for the left subtree
            }
            count += count(node.right, capacityConstraint);// Recursively count for the right subtree
            return count;
        }

    }
}
